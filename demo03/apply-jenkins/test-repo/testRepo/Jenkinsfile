pipeline {
    agent { label 'jenkins-ubuntu-slave' }
    stages {
        stage('sonarqube'){
            steps {
                script {
                    def repositoryUrl = scm.userRemoteConfigs[0].getUrl()
                    def GIT_REPO_NAME = scm.userRemoteConfigs[0].getUrl().tokenize('/').last().split("\\.")[0]
                    def SONAR_BRANCH_NAME = env.BRANCH_NAME
                    
                    def scannerHome = tool 'sonarqube-tool-iti'
                    withSonarQubeEnv("sonarqube-server-iti") {
                        sh "sed -i s#{{repo_name}}#${GIT_REPO_NAME}# sonar-project.properties"
                        sh "sed -i s#{{branch_name}}#${SONAR_BRANCH_NAME}# sonar-project.properties"
                        sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectVersion=${SONAR_BRANCH_NAME} -Dsonar.buildString=Jenkins-${SONAR_BRANCH_NAME}-BLD${env.BUILD_NUMBER}"
                    }
                    // Wait for the SonarQube analysis to complete and obtain the quality gate status
                    timeout(time: 10, unit: 'MINUTES') {
                        def qg = waitForQualityGate()
                        // Check the quality gate status
                        if (qg.status != 'OK') {
                            error "Pipeline failed due to SonarQube quality gate status: ${qg.status}"
                        }         
                    }
                }
            }
        }
    }
}